/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BiddingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CurrentTimestamp"
      | "FINISHED_STATE"
      | "IN_PROGRESS_STATE"
      | "STOPED_STATE"
      | "chooseWinner"
      | "companyTokenAddress"
      | "getBiddingAvailableBudget"
      | "getDeployTime"
      | "getDetails"
      | "getId"
      | "getPayableTokenAddress"
      | "getProposal"
      | "getRegisteredProposals"
      | "getTitle"
      | "proposalAddresses"
      | "registerNewProposal"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewProposalRegistered"
      | "PayBidding"
      | "ProposalChosen"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CurrentTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FINISHED_STATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IN_PROGRESS_STATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STOPED_STATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chooseWinner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "companyTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBiddingAvailableBudget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPayableTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredProposals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getTitle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNewProposal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CurrentTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FINISHED_STATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IN_PROGRESS_STATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STOPED_STATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chooseWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companyTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBiddingAvailableBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDetails", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPayableTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTitle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNewProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace NewProposalRegisteredEvent {
  export type InputTuple = [
    _proposalOwner: AddressLike,
    _proposalAddress: AddressLike
  ];
  export type OutputTuple = [_proposalOwner: string, _proposalAddress: string];
  export interface OutputObject {
    _proposalOwner: string;
    _proposalAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayBiddingEvent {
  export type InputTuple = [
    _value: BigNumberish,
    _choosenProposalAddress: AddressLike,
    _companyTokenAddress: AddressLike
  ];
  export type OutputTuple = [
    _value: bigint,
    _choosenProposalAddress: string,
    _companyTokenAddress: string
  ];
  export interface OutputObject {
    _value: bigint;
    _choosenProposalAddress: string;
    _companyTokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalChosenEvent {
  export type InputTuple = [_chosenProposalAddress: AddressLike];
  export type OutputTuple = [_chosenProposalAddress: string];
  export interface OutputObject {
    _chosenProposalAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bidding extends BaseContract {
  connect(runner?: ContractRunner | null): Bidding;
  waitForDeployment(): Promise<this>;

  interface: BiddingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CurrentTimestamp: TypedContractMethod<[], [string], "view">;

  FINISHED_STATE: TypedContractMethod<[], [string], "view">;

  IN_PROGRESS_STATE: TypedContractMethod<[], [string], "view">;

  STOPED_STATE: TypedContractMethod<[], [string], "view">;

  chooseWinner: TypedContractMethod<
    [_winnerProposalTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  companyTokenAddress: TypedContractMethod<[], [string], "view">;

  getBiddingAvailableBudget: TypedContractMethod<[], [bigint], "view">;

  getDeployTime: TypedContractMethod<[], [string], "view">;

  getDetails: TypedContractMethod<
    [],
    [[string, string, string, string, string, string, string]],
    "view"
  >;

  getId: TypedContractMethod<[], [string], "view">;

  getPayableTokenAddress: TypedContractMethod<[], [string], "view">;

  getProposal: TypedContractMethod<[], [string], "view">;

  getRegisteredProposals: TypedContractMethod<[], [string[]], "view">;

  getTitle: TypedContractMethod<[], [string], "view">;

  proposalAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  registerNewProposal: TypedContractMethod<
    [_proposalAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CurrentTimestamp"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FINISHED_STATE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "IN_PROGRESS_STATE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STOPED_STATE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chooseWinner"
  ): TypedContractMethod<
    [_winnerProposalTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "companyTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBiddingAvailableBudget"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDeployTime"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDetails"
  ): TypedContractMethod<
    [],
    [[string, string, string, string, string, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPayableTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRegisteredProposals"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTitle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "registerNewProposal"
  ): TypedContractMethod<[_proposalAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "NewProposalRegistered"
  ): TypedContractEvent<
    NewProposalRegisteredEvent.InputTuple,
    NewProposalRegisteredEvent.OutputTuple,
    NewProposalRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "PayBidding"
  ): TypedContractEvent<
    PayBiddingEvent.InputTuple,
    PayBiddingEvent.OutputTuple,
    PayBiddingEvent.OutputObject
  >;
  getEvent(
    key: "ProposalChosen"
  ): TypedContractEvent<
    ProposalChosenEvent.InputTuple,
    ProposalChosenEvent.OutputTuple,
    ProposalChosenEvent.OutputObject
  >;

  filters: {
    "NewProposalRegistered(address,address)": TypedContractEvent<
      NewProposalRegisteredEvent.InputTuple,
      NewProposalRegisteredEvent.OutputTuple,
      NewProposalRegisteredEvent.OutputObject
    >;
    NewProposalRegistered: TypedContractEvent<
      NewProposalRegisteredEvent.InputTuple,
      NewProposalRegisteredEvent.OutputTuple,
      NewProposalRegisteredEvent.OutputObject
    >;

    "PayBidding(uint256,address,address)": TypedContractEvent<
      PayBiddingEvent.InputTuple,
      PayBiddingEvent.OutputTuple,
      PayBiddingEvent.OutputObject
    >;
    PayBidding: TypedContractEvent<
      PayBiddingEvent.InputTuple,
      PayBiddingEvent.OutputTuple,
      PayBiddingEvent.OutputObject
    >;

    "ProposalChosen(address)": TypedContractEvent<
      ProposalChosenEvent.InputTuple,
      ProposalChosenEvent.OutputTuple,
      ProposalChosenEvent.OutputObject
    >;
    ProposalChosen: TypedContractEvent<
      ProposalChosenEvent.InputTuple,
      ProposalChosenEvent.OutputTuple,
      ProposalChosenEvent.OutputObject
    >;
  };
}
